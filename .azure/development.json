{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "storageAccountSku": {
      "type": "object",
      "defaultValue": {
        "name": "Standard_LRS",
        "tier": "Standard"
      }
    },
    "ownObjectId": {
      "type": "string"
    }
  },
  "functions": [
    {
      "namespace": "fn",
      "members": {
        "getStorageAccountConnectionString": {
          "parameters": [
            {
              "name": "storageAccountName",
              "type": "string"
            },
            {
              "name": "storageAccountKey",
              "type": "string"
            }
          ],
          "output": {
            "type": "string",
            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', parameters('storageAccountName'), ';AccountKey=', parameters('storageAccountKey'), ';EndpointSuffix=core.windows.net')]"
          }
        }
      }
    }
  ],
  "variables": {
    "resourceGroupLocation": "[resourceGroup().location]",
    "storageAccountName": "[resourceGroup().name]",
    "cosmosAccountName": "[resourceGroup().name]",
    "virtualNetworkName": "[resourceGroup().name]",
    "virtualSubnetName": "[resourceGroup().name]",
    "keyVaultName": "[resourceGroup().name]"
  },
  "resources": [
    {
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('virtualNetworkName')]",
      "apiVersion": "2019-04-01",
      "location": "[variables('resourceGroupLocation')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "192.168.255.0/24"
          ]
        },
        "dhcpOptions": {
          "dnsServers": []
        },
        "subnets": [
          {
            "name": "[variables('virtualSubnetName')]",
            "properties": {
              "addressPrefix": "192.168.255.0/24",
              "addressPrefixes": [
                "192.168.255.0/24"
              ],
              "networkSecurityGroup": null,
              "routeTable": null,
              "ipConfigurations": [],
              "applicationGatewayIPConfigurations": [],
              "serviceEndpoints": [
                {
                  "service": "Microsoft.AzureCosmosDB",
                  "locations": []
                },
                {
                  "service": "Microsoft.KeyVault",
                  "locations": []
                },
                {
                  "service": "Microsoft.Storage",
                  "locations": []
                }
              ],
              "resourceNavigationLinks": []
            }
          }
        ],
        "virtualNetworkPeerings": []
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccountName')]",
      "apiVersion": "2019-06-01",
      "location": "[variables('resourceGroupLocation')]",
      "kind": "StorageV2",
      "sku": "[parameters('storageAccountSku')]",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "accessTier": "Hot",
        "supportsHttpsTrafficOnly": true,
        "networkAcls": {
          "defaultAction": "Allow",
          "bypass": "AzureServices",
          "ipRules": [],
          "virtualNetworkRules": [
            {
              "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('virtualSubnetName'))]"
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "name": "[variables('keyVaultName')]",
      "apiVersion": "2019-09-01",
      "location": "[variables('resourceGroupLocation')]",
      "properties": {
        "enabledForDeployment": false,
        "enabledForTemplateDeployment": false,
        "enabledForDiskEncryption": false,
        "enableRbacAuthorization": false,
        "enableSoftDelete": false,
        "accessPolicies": [
          {
            "objectId": "[parameters('ownObjectId')]",
            "tenantId": "[subscription().tenantId]",
            "permissions": {
              "keys": [
                "get",
                "list",
                "update",
                "create",
                "import",
                "delete",
                "recover",
                "backup",
                "restore"
              ],
              "secrets": [
                "get",
                "list",
                "set",
                "delete",
                "recover",
                "backup",
                "restore"
              ],
              "certificates": [
                "get",
                "list",
                "update",
                "create",
                "import",
                "delete",
                "recover",
                "managecontacts",
                "manageissuers",
                "getissuers",
                "listissuers",
                "setissuers",
                "deleteissuers"
              ]
            }
          }
        ],
        "tenantId": "[subscription().tenantId]",
        "sku": {
          "name": "Standard",
          "family": "A"
        },
        "networkAcls": {
          "defaultAction": "Allow",
          "bypass": "AzureServices",
          "ipRules": [],
          "virtualNetworkRules": [
            {
              "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('virtualSubnetName'))]"
            }
          ]
        },
        "dependsOn": [
          "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]"
        ],
        "resources": [
          {
            "type": "secrets",
            "apiVersion": "2016-10-01",
            "name": "Storage",
            "properties": {
              "value": "[fn.getStorageAccountConnectionString(variables('storageAccountName'), listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).keys[0].value)]"
            },
            "dependsOn": [
              "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
              "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
            ]
          },
          {
            "type": "secrets",
            "apiVersion": "2016-10-01",
            "name": "Cosmos",
            "properties": {
              "value": "[listConnectionStrings(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosAccountName')), providers('Microsoft.DocumentDB', 'databaseAccounts').apiVersions[0]).connectionStrings[0].connectionString]"
            },
            "dependsOn": [
              "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosAccountName'))]",
              "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
            ]
          }
        ]
      }
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts",
      "name": "[variables('cosmosAccountName')]",
      "apiVersion": "2019-12-12",
      "location": "[variables('resourceGroupLocation')]",
      "kind": "GlobalDocumentDB",
      "properties": {
        "databaseAccountOfferType": "Standard",
        "locations": [
          {
            "locationName": "Germany West Central"
          }
        ],
        "enableMultipleWriteLocations": false,
        "isVirtualNetworkFilterEnabled": false,
        "enableFreeTier": true
      }
    }
  ],
  "outputs": {
    "storageAccountConnectionString": {
      "type": "string",
      "value": "[fn.getStorageAccountConnectionString(variables('storageAccountName'), listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).keys[0].value)]"
    },
    "cosmos": {
      "type": "array",
      "value": "[listConnectionStrings(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosAccountName')), providers('Microsoft.DocumentDB', 'databaseAccounts').apiVersions[0]).connectionStrings]"
    },
    "keyVaultUri": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))).vaultUri]"
    }
  }
}
